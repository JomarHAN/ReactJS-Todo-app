{"version":3,"sources":["todo.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["todo","props","title","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","todos","setTodos","useEffect","console","log","collection","onSnapshot","snapshot","docs","map","doc","data","className","value","onChange","e","target","type","disabled","onClick","preventDefault","add","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sPAUeA,G,MARF,SAACC,GACV,OACI,6BACI,4BAAKA,EAAMC,U,QCURC,E,OAbKC,EAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,YC6BRC,MArCf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,OAEYF,mBAAS,IAFrB,mBAENG,EAFM,KAEAC,EAFA,KAsBb,OAlBAC,qBAAU,WACRC,QAAQC,IAAI,iCAEZpB,EAAGqB,WAAW,SAASC,YAAW,SAAAC,GAChCN,EAASM,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAO5B,eAE/C,IAaA,yBAAK6B,UAAU,OACX,wCACA,8BACE,2BAAOC,MAAOf,EAAOgB,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOH,QAAQI,KAAK,SACnE,4BAAQC,UAAWpB,EAAOqB,QAdlB,SAACJ,GACfA,EAAEK,iBAEFpC,EAAGqB,WAAW,SAASgB,IAAI,CACzBtC,MAAOe,IAETC,EAAS,MAQH,YACCC,EAAMS,KAAI,SAAC5B,EAAKyC,GAAN,OACT,kBAAC,EAAD,CAAMvC,MAAOF,EAAM0C,IAAKD,UCtBhBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.e64e22eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst todo = (props) => {\r\n    return(\r\n        <div>\r\n            <h1>{props.title}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default todo","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCbwfwaCxJ9_SF9y-lWd6EhVODdTZjyV5w\",\r\n    authDomain: \"react-todo-app-50855.firebaseapp.com\",\r\n    databaseURL: \"https://react-todo-app-50855.firebaseio.com\",\r\n    projectId: \"react-todo-app-50855\",\r\n    storageBucket: \"react-todo-app-50855.appspot.com\",\r\n    messagingSenderId: \"460900356474\",\r\n    appId: \"1:460900356474:web:635f94369b56976ac986c3\",\r\n    measurementId: \"G-VGWZHY6WTS\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React, { useState , useEffect} from 'react';\nimport './App.css';\nimport Todo from './todo'\nimport db from './firebase'\n\nfunction App() {\n  const [input,setInput] = useState(\"\");\n  const [todos,setTodos] = useState([]);\n\n  useEffect(()=>{\n    console.log('I ran to the component loaded')\n\n    db.collection('todos').onSnapshot(snapshot =>{\n      setTodos(snapshot.docs.map(doc => doc.data().title))\n    })\n  },[])\n\n\n  const addTodo = (e)=>{\n    e.preventDefault()\n    // setTodos([...todos,input]);\n    db.collection('todos').add({\n      title: input\n    })\n    setInput(\"\")\n\n  }\n  return (\n    <div className=\"App\">\n        <h1>Todo App</h1>\n        <form>\n          <input value={input} onChange={e => setInput(e.target.value)} type=\"text\"/>\n          <button disabled={!input} onClick={addTodo}>Add Todo</button>\n          {todos.map((todo,i)=>(\n            <Todo title={todo} key={i}/>\n          ))}\n        </form>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}